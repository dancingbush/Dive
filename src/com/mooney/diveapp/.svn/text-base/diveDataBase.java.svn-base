package com.mooney.diveapp;


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.CursorIndexOutOfBoundsException;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class diveDataBase {
	
	public static final String KEY_ROWID="_id";
	public static final String KEY_DIVELOCATION ="diveLocation";
	public static final String KEY_DIVESITE = "diveSite";
	public static final String KEY__DIVENUMBER = "diveNumber";
	public static final String KEY__DIVEDATE="diveDate";
	public static final String KEY_DIVERATING="diveRating";
	public static final String KEY_BOTTOMTIME="bottomTime";
	public static final String KEY_DIVEBUDDY="diveBuddy";
	public static final String KEY__DIVECENTER="diveCenter";
	public static final String KEY_ENDBAR="endBar";
	public static final String KEY_STARTBAR="startBar";
	public static final String KEY_VIZIBILTY="diveVizibilty";
	public static final String KEY_WATERTEMP="waterTemp";
	public static final String KEY_COMMENTS="diveComments";
	public static final String KEY_CONDITIONS="diveConditions";
	public static final String KEY_DIVEPICTURE="divePicturePath";
	private static final String DATABASE_NAME="DiveLogs";
	private static final String DATABASE_TABLE =  "DiveLog";
	public static final String KEY_DEPTH = "Depth";
	public static final int DATABASE_VERSION = 2;//ver 2 for depth column
	private DbHelper  ourHelper;
	private final Context ourContext;
	private SQLiteDatabase ourDataBase;
	private String[] columns;//holds the columns data in a row
	
	//inner class off the main thead UI
	private class DbHelper extends SQLiteOpenHelper{
		
		public  DbHelper(Context context) {
			super(context, DATABASE_TABLE, null, DATABASE_VERSION);
			// TODO Auto-generated constructor stub
			
			
		}//end DbHelper constructor
	

	
	@Override 
	public void onCreate(SQLiteDatabase db) {
		// only called once when DB first created, takes DB as arg
		db.execSQL("CREATE TABLE "+ DATABASE_TABLE + " ("+
		KEY_ROWID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
		KEY_DIVELOCATION + " TEXT , "+ 
		KEY_DIVESITE + " TEXT , " +
		KEY__DIVENUMBER + " INTEGER DEFAULT 0 , " +
		KEY__DIVEDATE + " TEXT , " +
		KEY_DIVERATING + " FLOAT DEFAULT 0.0 , " +
		KEY_BOTTOMTIME + " INTEGER DEFAULT 0 , " +
		KEY_DIVEBUDDY + " TEXT , " +
		KEY__DIVECENTER + " TEXT , " +
		KEY_ENDBAR + " INTEGER DEFAULT 0 , " +
		KEY_STARTBAR + " INTEGER DEFAULT 0 , " +
		KEY_VIZIBILTY + " INTEGER DEFAULT 0 , " +
		KEY_WATERTEMP + " INTEGER DEFAULT 0, " +
		KEY_DEPTH + " INTEGER DEFAULT 0, " +
		KEY_COMMENTS + " TEXT , " +
		KEY_CONDITIONS + " TEXT , " +
		KEY_DIVEPICTURE + " TEXT );"
		);
		//use for dtabase querys
		columns = new String[]{KEY_ROWID, KEY_DIVERATING, KEY_BOTTOMTIME, KEY_DIVEBUDDY, 
				KEY__DIVECENTER, KEY_DIVELOCATION,
				KEY__DIVENUMBER, KEY_DIVESITE, KEY_ENDBAR, KEY_STARTBAR, 
				KEY_VIZIBILTY, KEY_WATERTEMP,KEY__DIVEDATE, 
				KEY_COMMENTS, KEY_CONDITIONS, KEY_DIVEPICTURE};

		
		
	}//end onCreate DB inner helper class

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// if table exits, drop it (delete) and recreate it to upgrade it
		db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE);
		onCreate(db);
		//need to call upgrade and add a int column for depth, newVersion is 2
		if (newVersion> oldVersion){
			db.execSQL("ALTER TABLE "+DATABASE_TABLE+" ADD COLUMN "+KEY_DEPTH+" INTEGER DEFAULT 0");
		}

		
		
	}//end oDbHelpernUgrade inner helper class

}//end inner class DbJHelper
	
	
	
	//--OUTER MAIN CLASS--
	
	public diveDataBase(Context c){
		ourContext=c;
	}//end outer class constructor
	
	/*
	public diveDataBase(ItemAdapter itemAdapter) {
		// for creating DB in ItemAdpter to get no of rows
		ourContext= itemAdapter;
	}//
*/
	public diveDataBase open() throws SQLException{
		ourHelper = new DbHelper(ourContext);//craete a new helper inner class object
		ourDataBase = ourHelper.getWritableDatabase();//creare our SQLLite db from or helper object
	return this;
	
	}//end open
	
	public void close(){
		//close dbHelper inner class
		ourHelper.close();
	}//end close

	
	//data sent from LogDive class to be saved as a individual row of data
	public long createEntry(float diveRate, int bottomDiveTime, String diveBuddyString,
			String diveCenterString, String diveLocationString, int diveNum,
			String diveSiteString, int endBars, int startBars, int viz,
			int waterTemperature, String diveDateString, String comment,
			String conditionChoice, String savedImagePath, int depth) {
		// using a content values key:value paried structire, from logdive class to send data to this class fro saving in DB
		//table of 15 values
		ContentValues cv = new ContentValues();
		cv.put(KEY_DIVERATING, diveRate);
		cv.put(KEY_BOTTOMTIME, bottomDiveTime);
		cv.put(KEY_DIVEBUDDY, diveBuddyString);
		cv.put(KEY__DIVECENTER, diveCenterString);
		cv.put(KEY_DIVELOCATION, diveLocationString);
		cv.put(KEY__DIVENUMBER, diveNum);
		cv.put(KEY_DIVESITE, diveSiteString);
		cv.put(KEY_ENDBAR, endBars);
		cv.put(KEY_STARTBAR, startBars);
		cv.put(KEY_VIZIBILTY, viz);
		cv.put(KEY_WATERTEMP, waterTemperature);
		cv.put(KEY__DIVEDATE, diveDateString);
		cv.put(KEY_COMMENTS, comment);
		cv.put(KEY_CONDITIONS, conditionChoice);
		cv.put(KEY_DIVEPICTURE, savedImagePath);
		
		cv.put(KEY_DEPTH, depth);
		
		//write to DB with helper object
		return ourDataBase.insert(DATABASE_TABLE, null, cv);
		//returns -1 if fails
		
	}//end craeteEntry

	
	public Cursor getCursorData(){
		//use cursor object to read data fro entire DB, can be returned to cutom list Cursor adapter
		
				Cursor c = this.ourDataBase.query(DATABASE_TABLE, columns, null, null, null, null, null);
				if(c!=null){
				return c;
				}
				return null;
	}//end hetGursor
	
	
	
	public String getData() {
		// retruns all data in the database
		
		
		//use cursor object to read data
		Cursor c = this.ourDataBase.query(DATABASE_TABLE, columns, null, null, null, null, null);
		String result="";
		
		//read data from cursor object
		int iRow = c.getColumnIndex(KEY_ROWID);
		int iDiveRating = c.getColumnIndex(KEY_DIVERATING);
		int iBottomTime = c.getColumnIndex(KEY_BOTTOMTIME);
		int iBuddy = c.getColumnIndex(KEY_DIVEBUDDY);
		int iDiveCenter = c.getColumnIndex(KEY__DIVECENTER);
		int iDiveLocation = c.getColumnIndex(KEY_DIVELOCATION);
		int iDiveNumber = c.getColumnIndex(KEY__DIVENUMBER);
		int iDiveSite = c.getColumnIndex(KEY_DIVESITE);
		int iEndBar = c.getColumnIndex(KEY_ENDBAR);
		int iStartBar = c.getColumnIndex(KEY_STARTBAR);
		int iViz = c.getColumnIndex(KEY_VIZIBILTY);
		int iWaterTemp = c.getColumnIndex(KEY_WATERTEMP);
		int iDiveRate = c.getColumnIndex(KEY__DIVEDATE);
		int iComments = c.getColumnIndex(KEY_COMMENTS);
		int iConditions = c.getColumnIndex(KEY_CONDITIONS);
		int iDiveImagePath = c.getColumnIndex(KEY_DIVEPICTURE);
		
		int iDepth = c.getColumnIndex(KEY_DEPTH);
		
		
		//loop through cursor object data from DB, move to next as longs as not at last row (isAfterLast)
		for(c.moveToFirst(); !c.isAfterLast(); c.moveToNext()){
			result = result + c.getString(iRow) + " " + c.getString(iDiveRate) + "\n" 
					+ c.getString(iBottomTime) + " " + c.getString(iBuddy) + "\n" 
					+ c.getString(iDiveCenter) + " " + c.getString(iDiveLocation) + "\n"
					+ c.getString(iDiveNumber) + " " + c.getString(iDiveSite) + "\n"
					+ c.getString(iEndBar) + " " + c.getString(iStartBar) + "\n"
					+ c.getString(iViz) + " " + c.getString(iWaterTemp) + "\n"
					+ c.getString(iDiveRate) + " " + c.getString(iComments) + "\n"
					+ c.getString(iConditions) + " " + c.getString(iDiveImagePath) 
					+ c.getString(iDepth)+ "\n\n\n";
					
					
		}//end for
		
		return result;
	}//end gerData

	
	//get methods for a specific row number entered (long l)
	
	public int getNumberOfRows(){
		
		Cursor c = this.ourDataBase.query(DATABASE_TABLE, columns, null, null, null, null, null);
		if(c!=null){
		
		int noOfRows = c.getCount()+1;
		return noOfRows;
		}
		return -1;
	}//end 
	
	public int getLastDiveNumber(){
		
		try{
		Cursor c = this.ourDataBase.query(DATABASE_TABLE, columns, null, null, null, null, null);
		if(c!=null){
		c.moveToLast();
		String diveNumberDB= c.getString(c.getColumnIndexOrThrow(diveDataBase.KEY__DIVENUMBER));
		String diveSiteCheck = c.getString(c.getColumnIndexOrThrow(diveDataBase.KEY_DIVESITE));
		int lastDive = (Integer.parseInt(diveNumberDB));
		//this.diveNumber.setText(String.valueOf(nextDive));
		return lastDive;
		}
		}catch(CursorIndexOutOfBoundsException e){
			e.printStackTrace();
			return 0;
		}
		return 0;
	}//end last dive no
	
	
	public String getDiveNumber(long l) throws SQLException{
		//l is row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String number= c.getString(c.getColumnIndex(KEY__DIVENUMBER));//data from column containing the loaction
			return number;
			
		}//end cursor
		return null;
		
	}//end getDiveNumber
	
	
	public String getLocation(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String location= c.getString(c.getColumnIndex(KEY_DIVELOCATION));//data fromcolumn containing the loaction
			return location;
			
		}//end cursor
		return null;
	}

	public String getSite(long l) throws SQLException{
		//l is our row ID
				Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
				if(c!=null){
					c.moveToFirst();
					String site= c.getString(c.getColumnIndex(KEY_DIVESITE));//data fromcolumn containing the loaction
					return site;
					
				}//end cursor
		return null;
	}

	public String getDiveDate(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String dtae= c.getString(c.getColumnIndex(this.KEY__DIVEDATE));//data fromcolumn containing the loaction
			return dtae;
			
		}//end cursor
		return null;
	}

	public String getDiveRate(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String rate= c.getString(c.getColumnIndex(this.KEY_DIVERATING));//data fromcolumn containing the loaction
			return rate;
			
		}//end cursor
		return null;
	}

	public String getDiveBottomTime(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String bt= c.getString(c.getColumnIndex(this.KEY_BOTTOMTIME));//data fromcolumn containing the loaction
			return bt;
			
		}//end cursor
		return null;
	}

	public String getDiveBuddy(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String buddy= c.getString(c.getColumnIndex(this.KEY_DIVEBUDDY));//data fromcolumn containing the loaction
			return buddy;
			
		}//end cursor
		return null;
	}

	public String getDiveCenter(long l) throws SQLException {
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String center= c.getString(c.getColumnIndex(this.KEY__DIVECENTER));//data fromcolumn containing the loaction
			return center;
			
		}//end cursor
		return null;
	}

	public String getDiveEndBar(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String EB= c.getString(c.getColumnIndex(this.KEY_ENDBAR));//data fromcolumn containing the loaction
			return EB;
			
		}//end cursor
		return null;
	}

	public String getDiveStartBar(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String sb= c.getString(c.getColumnIndex(this.KEY_STARTBAR));//data fromcolumn containing the loaction
			return sb;
			
		}//end cursor
		return null;
	}

	public String getDiveViz(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String viz= c.getString(c.getColumnIndex(this.KEY_VIZIBILTY));//data fromcolumn containing the loaction
			return viz;
			
		}//end cursor
		return null;
	}

	public String getDiveTemp(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String temperature= c.getString(c.getColumnIndex(this.KEY_WATERTEMP));//data fromcolumn containing the loaction
			return temperature;
			
		}//end cursor
		return null;
	}

	public String getDiveComments(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String comments= c.getString(c.getColumnIndex(this.KEY_COMMENTS));//data fromcolumn containing the loaction
			return comments;
			
		}//end cursor
		return null;
	}
	
	public String getDiveConditions(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String condition= c.getString(c.getColumnIndex(this.KEY_CONDITIONS));//data fromcolumn containing the loaction
			return condition;
			
		}//end cursor
		return null;
	}

	public String getDiveImage_Path(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String imagePath= c.getString(c.getColumnIndex(this.KEY_DIVEPICTURE));//data fromcolumn containing the loaction
			return imagePath;
			
		}//end cursor
		return null;
	}//end getDiveIMage
	
	public String getDiveDepth(long l) throws SQLException{
		//l is our row ID
		Cursor c = ourDataBase.query(DATABASE_TABLE, columns, KEY_ROWID + "=" +l, null, null, null, null);
		if(c!=null){
			c.moveToFirst();
			String depth= c.getString(c.getColumnIndex(KEY_DEPTH));//data fromcolumn containing the loaction
			return depth;
			
		}//end cursor
		return null;
	}
	
	//upadte a modified entry, data is sent from DB as Strings, then returned to here as Strings, so need to get te int from strimgs where needed
	public void updateEntry(long lRow, String diveRate, String bottomDiveTime,
			String diveBuddyString, String diveCenetrString,
			String diveLoctionString, String diveNum, String diveSiteString,
			String endBars, String startBars, String viz,
			String waterTemperature, String diveDateString, String comment,
			String conditionChoice, String savedImagePath, String depth) throws SQLException{
		// TODO Auto-generated method stub
		ContentValues cvUpdate = new ContentValues();
		cvUpdate.put(KEY_DIVERATING, diveRate);
		cvUpdate.put(KEY_BOTTOMTIME, bottomDiveTime);
		cvUpdate.put(KEY_DIVEBUDDY, diveBuddyString);
		cvUpdate.put(KEY__DIVECENTER, diveCenetrString);
		cvUpdate.put(KEY_DIVELOCATION, diveLoctionString);
		cvUpdate.put(KEY__DIVENUMBER, diveNum);
		cvUpdate.put(KEY_DIVESITE, diveSiteString);
		cvUpdate.put(KEY_ENDBAR, endBars);
		cvUpdate.put(KEY_STARTBAR, startBars);
		cvUpdate.put(KEY_VIZIBILTY, viz);
		cvUpdate.put(KEY_WATERTEMP, waterTemperature);
		cvUpdate.put(KEY__DIVEDATE, diveDateString);
		cvUpdate.put(KEY_COMMENTS, comment);
		cvUpdate.put(KEY_CONDITIONS, conditionChoice);
		cvUpdate.put(KEY_DIVEPICTURE, savedImagePath);
		cvUpdate.put(KEY_DEPTH, depth);
		//n=16
		ourDataBase.update(DATABASE_TABLE, cvUpdate, this.KEY_ROWID + "=" + lRow, null);
		
		
	}//end update modified entry

	public void deleteEntry(long lDeleteRow) throws SQLException{
		// deleted selected entry according to the row number chosen
		ourDataBase.delete(DATABASE_TABLE, KEY_ROWID + "=" +lDeleteRow , null);
		
		
		
	}//end delete entry
	
	//--END GET METHODS FOR INDVIDUAL COLUMN VALUES FIR A GIVEN ROW NUMBER (LONG l)--
	
	
	
	/*
	 * methods to search database with String query form searchable widget intent 
	*  in ViewListOfDives ListActivity search bar. Each search returns a cursor which is set to adpter
	*  in ViewListOfYesys List Activity
	*/
	
	
	//try alternate search
	public Cursor searchByInputText(String inputText) throws SQLException{
		
		/*
		dbHelperObject = new DbHelper(ourContext);
		dbHelperObject.getReadableDatabase();
		*/
		
		 String query = "SELECT  _id," +
				 KEY_DIVESITE +  " from " + DATABASE_TABLE +
	                " where " + KEY_DIVESITE + " LIKE '" + inputText + "';";
		
		 
		 Cursor mCursor =  ourDataBase.rawQuery(query, null);
		 
		 if(mCursor != null){
			 mCursor.moveToFirst();
		 }
		 return mCursor;
	
	
	}//end earchByInputTExt
	
	public Cursor getWordMatches(String query, String[] columns){
		
		//String selection = database.KEY_TESTNAME + " MATCH ?";
		//String[] selectionArgs = new String[] {query+"*"}; //wildcard *
		ourHelper = new DbHelper(ourContext);
		ourHelper.getReadableDatabase();
		
		
		//SO suggestion
		String selection = diveDataBase.KEY_DIVESITE + " LIKE ?";         
		String[] selectionArgs = new String[] {"%"+query+"%"};
		
		
		return query(selection, selectionArgs, columns);
		
		
	}//end getWordMatches

	
	
	private Cursor query(String selection, String[] selectionArgs,
			String[] columns) {
		
		// return cursor form params passed getWordMatches(Styring query) from search widget ListActivity
		
		this.open();
		
		SQLiteQueryBuilder builder = new SQLiteQueryBuilder();
		builder.setTables(DATABASE_TABLE);
		
		ourHelper = new DbHelper(ourContext);
	
		//Cursor cursor = builder.query(dbHelperObject.getReadableDatabase(), columns, selection, selectionArgs, null, null, null);
		Cursor cursor = builder.query(ourDataBase, columns, selection, selectionArgs, null, null, null);
		
	
		
		//dbHelperObject.getReadableDatabase()
		if(cursor == null){
			return null;
		}else{ cursor.moveToFirst();
		}
		
		/*
		 * else if(!cursor.moveToFirst()){
			cursor.close();
			return null;
		}
		 */
		return cursor;
		
		
		
		
	}//end query
	
	
	
	
	
}//end class diveDB
